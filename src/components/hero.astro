---
import { Image, Picture } from 'astro:assets'
import heroSoftwareImage from '../assets/hero-screenshot.png'
import heroMobileImage from '../assets/hero-mobile.png'
import heroWebImage from '../assets/hero-web.png'
import Link from '@components/ui/link.astro'
import Container from '@components/container.astro'
---

<div class="overflow-x-clip">
  <Container>
    <main
      class="grid lg:grid-cols-5 place-items-center relative"
      transition:persist>
      <div
        class="absolute w-96 h-96 blur-2xl -z-10 bg-gradient-radial from-indigo-200 right-0 top-0">
      </div>
      <div
        class="absolute w-96 h-96 blur-2xl -z-10 bg-gradient-radial from-purple-200 right-56 top-10">
      </div>

      <div class="max-w-sm md:max-w-max lg:col-span-2">
        <h1
          class="text-4xl lg:text-4xl xl:text-5xl font-bold lg:tracking-tight xl:tracking-tighter [text-wrap:balance] text-center lg:text-start">
          ðŸš€ Rocket your ideas, with wow-factor
          <a id="link-mobile" class="active">mobile apps</a>,
          <a id="link-web">websites</a> &
          <a id="link-software">bespoke software</a>.
        </h1>
        <p
          class="text-lg mt-4 max-w-lg text-slate-600 [text-wrap:balance] text-center lg:text-start">
          First impressions are everything. Talk to us, the digital experts
          since 2001.
        </p>
        <div
          class="mt-6 flex flex-col sm:flex-row sm:justify-center lg:justify-start gap-3">
          <Link
            href="/contact"
            class="flex gap-1 items-center justify-center"
            rel="noopener">
            Let's chat
          </Link>
          <Link
            id="learn-more-link"
            size="lg"
            style="outline"
            rel="noopener"
            href="/mobile-apps"
            class="flex gap-1 items-center justify-center">
            Learn more
          </Link>
        </div>
      </div>
      <div class="py-3 lg:col-span-3 lg:-mr-44">
        <Picture
          id="hero-mobile"
          class="animate-zoom-in"
          src={heroMobileImage}
          alt="Amazing mobile apps"
          formats={['avif', 'webp']}
          sizes="(max-width: 1024px) 100vw, 50vw"
          widths={[240, 540, 720, heroMobileImage.width]}
          loading="eager"
          fetchpriority="high"
        />

        <Picture
          id="hero-web"
          class="animate-zoom-in hidden"
          src={heroWebImage}
          alt="Amazing websites"
          formats={['avif', 'webp']}
          sizes="(max-width: 1024px) 100vw, 50vw"
          widths={[240, 540, 720, heroWebImage.width]}
          loading="eager"
          fetchpriority="high"
        />

        <Picture
          id="hero-software"
          class="animate-zoom-in hidden"
          src={heroSoftwareImage}
          alt="Amazing software"
          formats={['avif', 'webp']}
          sizes="(max-width: 1024px) 100vw, 50vw"
          widths={[240, 540, 720, heroSoftwareImage.width]}
          loading="eager"
          fetchpriority="high"
        />
      </div>
    </main>
  </Container>
</div>

<script>
  let linkMobile: Element | null,
    linkWeb: Element | null,
    linkSoftware: Element | null,
    heroMobile: Element | null,
    heroWeb: Element | null,
    heroSoftware: Element | null,
    interval: NodeJS.Timeout | null,
    paused: boolean = false

  const initHero = () => {
    linkMobile = document.getElementById('link-mobile')
    linkWeb = document.getElementById('link-web')
    linkSoftware = document.getElementById('link-software')

    heroMobile = document.getElementById('hero-mobile')
    heroWeb = document.getElementById('hero-web')
    heroSoftware = document.getElementById('hero-software')

    linkMobile?.addEventListener('focus', () => showHero('hero-mobile'))
    linkWeb?.addEventListener('focus', () => showHero('hero-web'))
    linkSoftware?.addEventListener('focus', () => showHero('hero-software'))
    linkMobile?.addEventListener('click', () => showHero('hero-mobile'))
    linkWeb?.addEventListener('click', () => showHero('hero-web'))
    linkSoftware?.addEventListener('click', () => showHero('hero-software'))

    // pause the hero rotation when the user clicks, presses a key or scrolls
    const events = ['click', 'keydown', 'scroll']
    events.forEach((event) => {
      document.addEventListener(event, () => {
        if (paused) return
        paused = true
        setTimeout(() => {
          paused = false
        }, 8000)
      })
    })

    // rotate each hero every 5 seconds by calling showHero
    const heroIds = ['hero-web', 'hero-software', 'hero-mobile']
    let heroIndex = 0
    interval = setInterval(() => {
      //if url is not  / then stop the timer
      if (window.location.pathname !== '/') {
        interval && clearInterval(interval)
        return
      }
      if (paused) {
        return
      }

      showHero(heroIds[heroIndex])
      heroIndex++
      if (heroIndex >= heroIds.length) {
        heroIndex = 0
      }
    }, 5000)
  }

  const showHero = (id: string) => {
    let learnMoreLink = document.getElementById('learn-more-link')
    switch (id) {
      case 'hero-web':
        learnMoreLink?.setAttribute('href', '/websites')
        heroWeb?.classList.remove('hidden')
        linkWeb?.classList.add('active')
        heroMobile?.classList.add('hidden')
        linkMobile?.classList.remove('active')
        heroSoftware?.classList.add('hidden')
        linkSoftware?.classList.remove('active')
        break
      case 'hero-software':
        learnMoreLink?.setAttribute('href', '/development')
        heroSoftware?.classList.remove('hidden')
        linkSoftware?.classList.add('active')
        heroMobile?.classList.add('hidden')
        linkMobile?.classList.remove('active')
        heroWeb?.classList.add('hidden')
        linkWeb?.classList.remove('active')
        break
      default:
        learnMoreLink?.setAttribute('href', '/mobile-apps')
        heroMobile?.classList.remove('hidden')
        linkMobile?.classList.add('active')
        heroWeb?.classList.add('hidden')
        linkWeb?.classList.remove('active')
        heroSoftware?.classList.add('hidden')
        linkSoftware?.classList.remove('active')
        break
    }
  }

  initHero()
  document.addEventListener('astro:after-swap', () => {
    interval && clearInterval(interval)
    initHero()
  })
</script>

<style>
  h1 {
    line-height: 1.1;
  }
  h1 a {
    text-decoration: underline;
    text-decoration-color: rgb(255, 163, 52);
    cursor: pointer;
  }
  h1 a.active {
    background: url(/pen-brush.svg);
    outline: none;
  }
  h1 a:focus {
    outline: none;
  }
</style>
